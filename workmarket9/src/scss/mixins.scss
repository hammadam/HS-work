@use "sass:list";

// 숨김 콘텐츠
@mixin a11yHidden {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  clip: rect(0, 0, 0, 0);
  clip-path: polygon(0 0, 0 0, 0 0);
  overflow: hidden;
  padding: 0;
  white-space: nowrap;
  border-width: 0;
}

// Size (width, inline-size, height, block-size)
@mixin inline-size($value) {
  width: $value;
  inline-size: $value;
}
@mixin block-size($value) {
  height: $value;
  block-size: $value;
}
@mixin size($width, $height: null) {
  @include inline-size($width);
  @if $height != null {
    @include block-size($height);
  }
}

// 여백 (padding, margin)
@mixin padding-inline-start($value) {
  padding-left: $value;
  padding-inline-start: $value;
}
@mixin padding-inline-end($value) {
  padding-right: $value;
  padding-inline-end: $value;
}
@mixin padding-block-start($value) {
  padding-top: $value;
  padding-block-start: $value;
}
@mixin padding-block-end($value) {
  padding-bottom: $value;
  padding-block-end: $value;
}

@mixin paddingX($paddingX) {
  @include padding-inline-start($paddingX);
  @include padding-inline-end($paddingX);
}
@mixin paddingY($paddingY) {
  @include padding-block-start($paddingY);
  @include padding-block-end($paddingY);
}

@mixin padding($paddingX, $paddingY: null) {
  @include paddingX($paddingX);
  @if $paddingY == null {
    @include paddingY($paddingX);
  } @else {
    @include paddingY($paddingY);
  }
}

@mixin margin-inline-start($value) {
  margin-left: $value;
  margin-inline-start: $value;
}
@mixin margin-inline-end($value) {
  margin-right: $value;
  margin-inline-end: $value;
}
@mixin margin-block-start($value) {
  margin-top: $value;
  margin-block-start: $value;
}
@mixin margin-block-end($value) {
  margin-bottom: $value;
  margin-block-end: $value;
}

@mixin marginX($marginX) {
  @include margin-inline-start($marginX);
  @include margin-inline-end($marginX);
}
@mixin marginY($marginY) {
  @include margin-block-start($marginY);
  @include margin-block-end($marginY);
}

@mixin margin($marginX, $marginY: null) {
  @include marginX($marginX);
  @if $marginY == null {
    @include marginY($marginX);
  } @else {
    @include marginY($marginY);
  }
}

// Position
@mixin position($position, $offsets: 0, $z-index: null) {
  position: $position;
  @if $z-index != null {
    z-index: $z-index;
  }
  @if list.length($offsets) == 1 {
    top: list.nth($offsets, 1);
    right: list.nth($offsets, 1);
    bottom: list.nth($offsets, 1);
    left: list.nth($offsets, 1);
  } @else if list.length($offsets) == 2 {
    top: list.nth($offsets, 1);
    right: list.nth($offsets, 2);
    bottom: list.nth($offsets, 1);
    left: list.nth($offsets, 2);
  } @else if list.length($offsets) == 3 {
    top: list.nth($offsets, 1);
    right: list.nth($offsets, 2);
    bottom: list.nth($offsets, 3);
    left: list.nth($offsets, 2);
  } @else if list.length($offsets) >= 4 {
    top: list.nth($offsets, 1);
    right: list.nth($offsets, 2);
    bottom: list.nth($offsets, 3);
    left: list.nth($offsets, 4);
  }
}


// Flex Box
@mixin flexbox($direction: row, $wrap: nowrap, $justify: null, $items: null, $gap: null) {
  display: flex;
  flex-direction: $direction;
  flex-wrap: $wrap;
  justify-content: $justify;
  align-items: $items;
  gap: $gap;
}

// Grid Box
@mixin gridbox($column-count, $column-gap: 20px, $row-gap: null) {
  $row-gap: if($row-gap == null, $column-gap, $row-gap);

  display: grid;
  grid-template-columns: repeat($column-count, 1fr);
  gap: $row-gap $column-gap;
}

@mixin grid-column-start($number) {
  grid-column-start: $number;
}

@mixin grid-row-start($number) {
  grid-row-start: $number;
}

@mixin grid-column-span($count) {
  grid-column-end: span $count;
}

@mixin grid-row-span($count) {
  grid-row-end: span $count;
}